# üê≥ Docker Compose - Sistema de Gesti√≥n Agr√≠cola

services:
  # üêò Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: elorza_postgres
    environment:
      POSTGRES_DB: sistema_gestion_agricola
      POSTGRES_USER: elorza
      POSTGRES_PASSWORD: password123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U elorza -d sistema_gestion_agricola"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # üêç Backend Flask
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      args:
        - PYTHON_VERSION=3.11
    container_name: elorza_backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://elorza:password123@postgres:5432/sistema_gestion_agricola
      - SECRET_KEY=development-secret-key-change-in-production
      - PYTHONPATH=/app
    volumes:
      - ./backend:/app/backend:ro
      - ./config.py:/app/config.py:ro
      - ./static:/app/static
      - ./frontend/dist:/app/static/dist:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ‚öõÔ∏è Frontend React (desarrollo)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: elorza_frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app:ro
      - /app/node_modules
      - frontend_dist:/app/dist
    environment:
      - VITE_API_URL=http://localhost:5000
      - CHOKIDAR_USEPOLLING=true
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped

  # üîß Adminer (Administrador de DB opcional)
  adminer:
    image: adminer:4.8.1
    container_name: elorza_adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - app-network
    depends_on:
      - postgres
    profiles:
      - debug
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  frontend_dist:
    driver: local

networks:
  app-network:
    driver: bridge
    name: elorza_network